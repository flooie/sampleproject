# To explain this convoluted action.  We are trying to allow PR merges
# into master & pushes directly into master with a version tag
# (e.g. "v0.0.0") to automatically build and push to pypi.  This is more
# complicated than one would immediately presume because PRs mergers
# are technically pushes, tagging a commit and than PRing it removes the tag
# from the context you can immediately pull up and changes after the tag
# during a review, for example, would move the tag down the commit list.

# What we do is this.  If a Push to master is tagged with our tag,
# we validate the format and send to PyPI.

# If a PR is closed and merged, we have to query the tags information and check
# if the most recent tagged branch is inside all the commits in our current PR.
# If the PR contains a properly formatted tag, we send to PyPI.  Additionally,
# we check that this only happens on the default branch.

name: PyPI
on:
  push:
    branches:
      - main
  create:

jobs:
  run-pypi:
    name: 'PyPI'
    runs-on: ubuntu-latest
    steps:
      - name: Check tag
        env:
          CONTEXT: ${{ toJson(github) }}
        run: |
          import subprocess, os, re, json, urllib
          context = json.loads(os.environ['CONTEXT'])

          print(context)
          x = "echo '::set-output name=SELECTED_COLOR::green'"
          subprocess.call(x, shell=True)

          release_true = "echo '::set-output name=PYPI_RELEASE::true'"

          pattern = re.compile("^v\d{1,2}\.\d{1,2}\.\d{1,2}")
          if "tags" in os.environ['GITHUB_REF']:
            print("FIRST IF")
            tag = os.environ['GITHUB_REF'].split("/")[-1]
            if pattern.match(tag) is not None:
              print("MATCH TAG")
              subprocess.call(release_true, shell=True)
              print("calling this a release here")
          else:
            print("ELSE")
            tag_url = context['event']['repository']['tags_url']
            tags = json.loads(urllib.urlopen(tag_url).read())
            tagged_sha1 = tags[0]['commit']['sha']
            tag_name = tags[0]['name']

            print(tag_url)
            print(tags)
            print(tag_name)

            if tagged_sha1 in [x['id'] for x in context['event']['commits']]:
              print("tagged sha1")
              if pattern.match(tag_name) is not None:
                print("FINAL")

                subprocess.call(release_true, shell=True)
        id: tags
        shell: python

      - name: No PyPI release
        if: steps.tags.outputs.PYPI_RELEASE != 'true'
        run: |
          echo "Not a PyPI release."
          echo "${{ steps.tags.outputs.PYPI_RELEASE }}"
          echo "The selected color is ${{ steps.tags.outputs.SELECTED_COLOR }}"

      - name: PyPI release
        if: steps.tags.outputs.PYPI_RELEASE == 'true'
        run: |
          echo "A PyPI release."
          echo "${{ steps.tags.outputs.PYPI_RELEASE }}"
          echo "The selected color is ${{ steps.tags.outputs.SELECTED_COLOR }}"
#        uses: casperdcl/deploy-pypi@v1
#        with:
#          password: ${{ secrets.pypi_token }}
#          build: true



  run-pypiII:
    name: 'PyPI'
    runs-on: ubuntu-latest
    steps:
      - name: Set tags
        run: |
          import subprocess, os
          x = "echo '::set-output name=SELECTED_COLOR::green'"
          subprocess.call(x, shell=True)
          print(os.environ.keys())
          for key in os.environ.keys():
            print(key, os.environ[key])
        id: tags
        shell: python

      - name: Get color
        if: steps.tags.outputs.SELECTED_COLOR == 'green'
        run: echo "The selected color is ${{ steps.tags.outputs.SELECTED_COLOR }}"

      - name: Get red
        if: steps.tags.outputs.SELECTED_COLOR == 'red'
        run: echo "The selected color is ${{ steps.tags.outputs.SELECTED_COLOR }}"
