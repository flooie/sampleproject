# To explain this convoluted action.  We are trying to allow PR merges
# into master & pushes directly into master with a version tag
# (e.g. "v0.0.0") to automatically build and push to pypi.  This is more
# complicated than one would immediately presume because PRs mergers
# are technically pushes, tagging a commit and than PRing it removes the tag
# from the context you can immediately pull up and changes after the tag
# during a review, for example, would move the tag down the commit list.

# What we do is this.  If a Push to master is tagged with our tag,
# we validate the format and send to PyPI.

# If a PR is closed and merged, we have to query the tags information and check
# if the most recent tagged branch is inside all the commits in our current PR.
# If the PR contains a properly formatted tag, we send to PyPI.  Additionally,
# we check that this only happens on the default branch.

name: PyPI
on:
  push:
    branches:
      - main
  create:
    branches:
      - main

jobs:
  run-pypi:
    name: 'PyPI'
    runs-on: ubuntu-latest
    steps:
      - name: Set tags
        run: |
          import subprocess
          x = "echo '::set-output name=SELECTED_COLOR::green'"
          subprocess.call(x, shell=True)
        id: tags
        shell: python

      - name: Get color
        if: steps.tags.outputs.SELECTED_COLOR == 'green'
        run: echo "The selected color is ${{ steps.tags.outputs.SELECTED_COLOR }}"

      - name: Get red
        if: steps.tags.outputs.SELECTED_COLOR == 'red'
        run: echo "The selected color is ${{ steps.tags.outputs.SELECTED_COLOR }}"


#      - name: Check Tags
#        shell: python
#        id: vars
#        env:
#          CONTEXT: ${{ toJson(github) }}
#        run: |
#          import os, json, urllib, subprocess, re
#
#          subprocess.call('echo ::set-output name=continue::False', shell=True)
#          context = json.loads(os.environ['CONTEXT'])
#
#          print(context)
#
#          tag_url = context['event']['repository']['tags_url']
#          tags = json.loads(urllib.urlopen(tag_url).read())
#
#          tagged_sha1 = tags[0]['commit']['sha']
#          tag_name = tags[0]['name']
#          pattern = re.compile("^v\d{1,2}\.\d{1,2}\.\d{1,2}")
#          subprocess.call('echo ::set-output name=HIT::True', shell=True)
#
#      - name: PyPI release!
#        if: steps.vars.outputs.HIT == 'True'
#        run: |
#          echo "a PyPI release"
##        uses: casperdcl/deploy-pypi@v1
##        with:
##          password: ${{ secrets.pypi_token }}
##          build: true
#
#      - name: Not a PyPI release.
#        if: steps.vars.outputs.HIT != 'True'
#        run: |
#          echo "Not a PyPI release"
#          echo "{{ steps.vars.outputs.HIT }}"
#          echo "${{ steps.vars.outputs.HIT }}"
