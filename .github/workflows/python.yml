# To explain this convoluted action.  We are trying to allow PR merges
# into master & pushes directly into master with a version tag
# (e.g. "v0.0.0") to automatically build and push to pypi.  This is more
# complicated than one would immediately presume because PRs mergers
# are technically pushes, tagging a commit and than PRing it removes the tag
# from the context you can immediately pull up and changes after the tag
# during a review, for example, would move the tag down the commit list.

# What we do is this.  If a Push to master is tagged with our tag,
# we validate the format and send to PyPI.

# If a PR is closed and merged, we have to query the tags information and check
# if the most recent tagged branch is inside all the commits in our current PR.
# If the PR contains a properly formatted tag, we send to PyPI.  Additionally,
# we check that this only happens on the default branch.

name: PyPI
on:
  push:
    branches:
      - main
  create:
    branches:
      - main

jobs:
  run-pypi:
    name: 'PyPI'
    runs-on: ubuntu-latest
    steps:
      - name: Set tags
        env:
          CONTEXT: ${{ toJson(github) }}
        run: |
          import subprocess, os, re, json, urllib
          release_true = "echo '::set-output name=PYPI_RELEASE::true'"

          pattern = re.compile("^v\d{1,2}\.\d{1,2}\.\d{1,2}")
          if "tags" in os.environ['GITHUB_REF']:
            tag = os.environ['GITHUB_REF'].split("/")[-1]
            if pattern.match(tag) is not None:
              subprocess.call(y, shell=True)
          else:
            context = json.loads(os.environ['CONTEXT'])
            tag_url = context['event']['repository']['tags_url']
            tags = json.loads(urllib.urlopen(tag_url).read())
            tagged_sha1 = tags[0]['commit']['sha']
            tag_name = tags[0]['name']
            if tagged_sha1 in [x['id'] for x in context['event']['commits']]:
              if pattern.match(tag_name) is not None:
                subprocess.call(release_true, shell=True)
        id: tags
        shell: python

      - name: No PyPI release
        if: steps.tags.outputs.PYPI_RELEASE != 'true'
        run: echo "Not a PyPI release."

      - name: PyPI release.
        if: steps.tags.outputs.PYPI_RELEASE == 'true'
        uses: casperdcl/deploy-pypi@v1
        with:
          password: ${{ secrets.pypi_token }}
          build: true
